{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\Tree.svelte",
    "..\\..\\Search.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  /* \r\n  TO-ADD: a clear search function maybe after selecting a link or clicking\r\n  \r\n  IDEA:\r\n  after every subbranch ends and its time to switch back to col-1, add an extra row\r\n  how does adding an extra row per parent branch? it simplifies our equation:\r\n\r\n  (numBranches + numSubbranches) - numParentBranches = numRows\r\n  becomes\r\n  numBranches + numSubbranches = numRows\r\n*/\r\n\r\n  import flatten from \"flat\";\r\n  import { onMount } from \"svelte\";\r\n\r\n  export let query = \"\";\r\n\r\n  // $: if (query) {\r\n  //   console.log();\r\n  // }\r\n\r\n  // runs after component is loaded into the DOM - could put like, a lot of code in here\r\n  onMount(async () => {\r\n    createTree(tree);\r\n  });\r\n\r\n  // start matching from 1 meaningful char (accounts for whitespace)\r\n  $: if (query.length > 2) {\r\n    // prepare DOM for tree\r\n    // console.log(document.querySelector(\".tree\"));\r\n    document.querySelector(\".tree\").style.display = \"\";\r\n    // can clean here and will only affect this components copy\r\n    query = query.substr(1);\r\n    console.log(`'${query}'`, query.length);\r\n\r\n    // get all non-empty branches\r\n    let branches = document.querySelectorAll(\".c1\");\r\n    branches = Array.from(branches).filter(b => b.textContent);\r\n\r\n    for (const branch of branches) {\r\n      // console.log(branch.textContent);\r\n      if (branch.textContent.includes(query)) {\r\n        branch.style.visibility = \"visible\";\r\n        branch.style.borderBottom = \"2px solid var(--primary-color)\";\r\n      }\r\n    }\r\n\r\n    // get all non-empty subbranches\r\n    let subbranches = document.querySelectorAll(\".c2\");\r\n    subbranches = Array.from(subbranches).filter(sb => sb.textContent);\r\n\r\n    for (const subbranch of subbranches) {\r\n      if (subbranch.textContent.includes(query)) {\r\n        subbranch.style.visibility = \"visible\";\r\n        subbranch.style.borderLeft = \"2px solid var(--primary-color)\";\r\n      }\r\n    }\r\n    // if textContent, the previous sibling is the parent branch\r\n    // assume same parent branch for all subbranches that have no textContent prev siblings\r\n    // first c2 with text will also have a parent branch as prev sibling\r\n\r\n    // if (subbranches[0].previousElementSibling.textContent) {\r\n    // light up the parent node\r\n    // console.log(\r\n    //   \"parent branch:\",\r\n    //   subbranches[0].previousElementSibling.textContent\r\n    // );\r\n    // }\r\n  }\r\n\r\n  // add to videos: tidbits, PAVEMENT_2017_AH18, ...\r\n  // 'source' could be called 'root', 'home' ...\r\n  // placeholder tree object\r\n  // translate into generated object-only JSON string\r\n  let tree = {\r\n    source: \"path\",\r\n    about: \"path\",\r\n    web: {\r\n      primer_2027: \"path\",\r\n      platypus: \"path\",\r\n      roslyn_health: \"path\"\r\n    },\r\n    video: {\r\n      oh_ivy: \"path\",\r\n      procedural_disco: \"path\",\r\n      NCTRNL: \"path\"\r\n    }\r\n  };\r\n\r\n  // 1. set 'branch' to col-1 once, no newline\r\n  // 2. for subbranch length, add elm to col-2, then newline\r\n  // 3. after last subbranch elm, newline and set back to col-1\r\n  const createTree = obj => {\r\n    // counters for columns and rows\r\n    let c = 1;\r\n    let r = 1;\r\n\r\n    for (const branch in obj) {\r\n      if (typeof obj[branch] == \"object\") {\r\n        document.querySelector(`.c${c}.r${r}`).textContent = branch;\r\n        // console.log(branch, r, c);\r\n        r--;\r\n        for (let i = 0; i < Object.keys(obj[branch]).length; i++) {\r\n          c = 2;\r\n          r++;\r\n          // console.log(Object.keys(obj[branch])[i], r, c);\r\n          document.querySelector(`.c${c}.r${r}`).textContent = Object.keys(\r\n            obj[branch]\r\n          )[i];\r\n        }\r\n        // add margin-bump to last subbranch of a single parent branch here?\r\n        // or try style subbranch boundaries better?\r\n        // or go back to r += 2?\r\n\r\n        // reset for new branch\r\n        c = 1;\r\n        r++;\r\n      } else {\r\n        // console.log(branch, r, c);\r\n        document.querySelector(`.c${c}.r${r}`).textContent = branch;\r\n        c = 1;\r\n        r++;\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .tree {\r\n    grid-gap: 0;\r\n    grid-template-columns: repeat(2, min-content);\r\n  }\r\n\r\n  /* branches */\r\n  .tree div {\r\n    visibility: hidden;\r\n    background-color: var(--bg-color);\r\n    border: 2px solid var(--primary-color);\r\n  }\r\n\r\n  .c2 {\r\n    padding-left: 0.2rem;\r\n  }\r\n\r\n  /* mobile width and mobile landscape-height  */\r\n  @media (max-width: 510px), (max-height: 470px) {\r\n    .tree {\r\n      grid-template-columns: min-content auto;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"wrap\">\r\n  <div class=\"tree grid-2\">\r\n    <div class=\"c1 r1\" />\r\n    <div class=\"c2 r1\" />\r\n    <div class=\"c1 r2\" />\r\n    <div class=\"c2 r2\" />\r\n    <div class=\"c1 r3\" />\r\n    <div class=\"c2 r3\" />\r\n    <div class=\"c1 r4\" />\r\n    <div class=\"c2 r4\" />\r\n    <div class=\"c1 r5\" />\r\n    <div class=\"c2 r5\" />\r\n    <div class=\"c1 r6\" />\r\n    <div class=\"c2 r6\" />\r\n    <div class=\"c1 r7\" />\r\n    <div class=\"c2 r7\" />\r\n    <div class=\"c1 r8\" />\r\n    <div class=\"c2 r8\" />\r\n    <div class=\"c1 r9\">loading..</div>\r\n    <div class=\"c2 r9\">~*x+-+x*~*x+-</div>\r\n    <div class=\"c1 r10\" />\r\n    <div class=\"c2 r10\">|/-\\|/-\\|/-\\|</div>\r\n  </div>\r\n</div>\r\n\r\n<!-- html/nav structure options -->\r\n<!-- json, array, object, grid, table, list, mermaidjs ? -->\r\n<!-- could generate these grid items by parameterised calls to a component that makes #each html calls -->\r\n\r\n<!-- {#each x as y}{/each} -->\r\n\r\n<!--\r\n  // let branches = Object.keys(tree);\r\n  // console.log(branches);\r\n\r\n  // for (branch of branches) {\r\n  //   // branch css code here\r\n  //   if (branch.includes(query)) {\r\n  //     // light up brnach\r\n  //   }\r\n  // }\r\n\r\n  // from https://stackoverflow.com/a/44134784\r\n  // const getObjRows = obj => {\r\n  //   return Object.keys(tree).reduce(function(r, k) {\r\n  //     return r.concat(k, tree[k]);\r\n  //   }, []);\r\n  // };\r\n\r\n  // console.log(\r\n  //   tree.flatMap(a =>\r\n  //     typeof a == \"object\" ? console.log(\"col-2\") : console.log(\"col-1\")\r\n  //   )\r\n  // );\r\n  // console.log(Object.keys(flatten(tree)));\r\n  // console.log(Object.entries(tree));\r\n  // console.log(flatten(tree).length);\r\n\r\n  // const flatTree = flatten(tree);\r\n\r\n // $: if (query) {\r\n  //   console.log(query[0]);\r\n  //   if (query[0] !== \" \") {\r\n  //     query = \" \";\r\n  //   }\r\n  // } -->\r\n",
    "<script>\r\n  // to implement: detect if control is held down and 'a' or 'x' (or 'v'?) are pressed\r\n\r\n  // import { onMount } from \"svelte\";\r\n  // import { createEventDispatcher } from \"svelte\";\r\n  // const dispatch = createEventDispatcher();\r\n  // const func = () => dispatch(\"eventname\", var/ref);\r\n\r\n  export let query;\r\n\r\n  // #cancel mouse-selection of query text\r\n  const queryMousedown = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  // #cancel special keys\r\n  const queryKeydown = e => {\r\n    if (\r\n      e.key === \"Enter\" ||\r\n      e.key === \"Control\" ||\r\n      e.key === \"ArrowLeft\" ||\r\n      e.key === \"ArrowRight\" ||\r\n      e.key === \"Delete\" ||\r\n      (e.key === \"Backspace\" && e.target.textContent.length === 1)\r\n    ) {\r\n      console.log(`stopped ${e.key} special case`);\r\n      // find some way of ensuring query[0] is always a whitespace\r\n      e.preventDefault(); // will stop event bubbling to keypress\r\n    }\r\n  };\r\n\r\n  // from https://www.geeksforgeeks.org/how-to-set-cursor-position-in-content-editable-element-using-javascript/\r\n  // warning: setting 'pointer-events' or 'user-select' to none undermines this function\r\n  const positionCursor = () => {\r\n    // relevant text-element\r\n    const tag = document.querySelector(\".query\");\r\n    // Creates range object\r\n    const setpos = document.createRange();\r\n    // Creates object for selection\r\n    const set = window.getSelection();\r\n    // Set start position of range\r\n    setpos.setStart(tag.childNodes[0], tag.textContent.length);\r\n    // Collapse range within its boundary points\r\n    // Returns boolean\r\n    setpos.collapse(true);\r\n    // Remove all ranges set\r\n    set.removeAllRanges();\r\n    // Add range with respect to range object\r\n    set.addRange(setpos);\r\n    // Set cursor on focus\r\n    tag.focus();\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .omninav {\r\n    background-color: var(--bg-color);\r\n    text-align: left;\r\n    width: 100%;\r\n  }\r\n\r\n  .search {\r\n    background-color: rgba(0, 0, 0, 0.69);\r\n    color: var(--primary-color);\r\n    display: inline;\r\n  }\r\n\r\n  .search-wrap {\r\n    margin-top: 2rem;\r\n    margin-bottom: 2rem;\r\n    outline: 1px solid white;\r\n    cursor: text;\r\n    /* approx width of .tree */\r\n    /* max-width: 29rem;\r\n    min-width: 70%; */\r\n  }\r\n\r\n  .query {\r\n    outline: none;\r\n    caret-color: transparent;\r\n  }\r\n\r\n  .query::before {\r\n    content: \"$_:\";\r\n    display: inline;\r\n    color: var(--secondary-color);\r\n    padding-left: 0.15rem;\r\n  }\r\n\r\n  .query::after {\r\n    content: \"\";\r\n    display: inline-block;\r\n    width: 0.8rem;\r\n    height: 1.7rem;\r\n    margin-bottom: 0.08rem;\r\n    background-color: var(--primary-color);\r\n    vertical-align: middle;\r\n    animation: blink 1s ease-in-out infinite;\r\n  }\r\n\r\n  @keyframes blink {\r\n    0% {\r\n      opacity: 100%;\r\n    }\r\n    20% {\r\n      opacity: 40%;\r\n    }\r\n    40% {\r\n      opacity: 0%;\r\n    }\r\n    60% {\r\n      opacity: 50%;\r\n    }\r\n    80% {\r\n      opacity: 80%;\r\n    }\r\n    100% {\r\n      opacity: 100%;\r\n    }\r\n  }\r\n\r\n  /* mobile width and mobile landscape-height  */\r\n  @media (max-width: 510px), (max-height: 470px) {\r\n    .query::after {\r\n      width: 0.5rem;\r\n      height: 1rem;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"omninav\" on:click={positionCursor}>\r\n  <div class=\"search-wrap wrap\">\r\n    <div class=\"search\" on:click={positionCursor}>\r\n      <span\r\n        class=\"query\"\r\n        contenteditable=\"true\"\r\n        spellcheck=\"false\"\r\n        bind:textContent={query}\r\n        on:click={positionCursor}\r\n        on:keydown={queryKeydown}\r\n        on:mousedown={queryMousedown} />\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- on:keypress={queryKeypress} -->\r\n<!-- on:keypress={console.log('keypress')} -->\r\n<!-- &nbsp; -->\r\n\r\n<!--\r\n  // count valid keypresses and restricts length\r\n  // only runs if key is not a special key\r\n  // forces search to remain single-line\r\n  const queryKeypress = e => {\r\n  // 21chars is max at 320px (i5)\r\n  // assume ~25-30% of clientWidth is not .query\r\n  // assume font-size: ~1rem\r\n  // 320 * 0.7 = 224\r\n  // 224 / 21 = ~10px per char\r\n  // use an equation between char size and omnibar width\r\n  let max = Math.floor(\r\n    (document.querySelector(\".navbar\").clientWidth * 0.666) / 10\r\n  );\r\n  console.log(max);\r\n  if (e.target.textContent.length > max) {\r\n    e.preventDefault();\r\n  }\r\n  };\r\n-->\r\n\r\n<!-- \r\n    // also an option from https://stackoverflow.com/a/7445389\r\n    // function SetEnd(txt) {\r\n      if (txt.createTextRange) {\r\n       //IE\r\n       var FieldRange = txt.createTextRange();\r\n       FieldRange.moveStart('character', txt.value.length);\r\n       FieldRange.collapse();\r\n       FieldRange.select();\r\n       }\r\n      else {\r\n       //Firefox and Opera\r\n       txt.focus();\r\n       var length = txt.value.length;\r\n       txt.setSelectionRange(length, length);\r\n      }\r\n    }\r\n  -->\r\n"
  ],
  "names": [],
  "mappings": "AAiIE,KAAK,8BAAC,CAAC,AACL,QAAQ,CAAE,CAAC,CACX,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,AAC/C,CAAC,AAGD,oBAAK,CAAC,GAAG,eAAC,CAAC,AACT,UAAU,CAAE,MAAM,CAClB,gBAAgB,CAAE,IAAI,UAAU,CAAC,CACjC,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,eAAe,CAAC,AACxC,CAAC,AAED,GAAG,8BAAC,CAAC,AACH,YAAY,CAAE,MAAM,AACtB,CAAC,AAGD,MAAM,AAAC,YAAY,KAAK,CAAC,EAAE,aAAa,KAAK,CAAC,AAAC,CAAC,AAC9C,KAAK,8BAAC,CAAC,AACL,qBAAqB,CAAE,WAAW,CAAC,IAAI,AACzC,CAAC,AACH,CAAC;AC/FD,QAAQ,cAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,UAAU,CAAC,CACjC,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,OAAO,cAAC,CAAC,AACP,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACrC,KAAK,CAAE,IAAI,eAAe,CAAC,CAC3B,OAAO,CAAE,MAAM,AACjB,CAAC,AAED,YAAY,cAAC,CAAC,AACZ,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACxB,MAAM,CAAE,IAAI,AAId,CAAC,AAED,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,WAAW,AAC1B,CAAC,AAED,oBAAM,QAAQ,AAAC,CAAC,AACd,OAAO,CAAE,KAAK,CACd,OAAO,CAAE,MAAM,CACf,KAAK,CAAE,IAAI,iBAAiB,CAAC,CAC7B,YAAY,CAAE,OAAO,AACvB,CAAC,AAED,oBAAM,OAAO,AAAC,CAAC,AACb,OAAO,CAAE,EAAE,CACX,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,MAAM,CACd,aAAa,CAAE,OAAO,CACtB,gBAAgB,CAAE,IAAI,eAAe,CAAC,CACtC,cAAc,CAAE,MAAM,CACtB,SAAS,CAAE,mBAAK,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,AAC1C,CAAC,AAED,WAAW,mBAAM,CAAC,AAChB,EAAE,AAAC,CAAC,AACF,OAAO,CAAE,IAAI,AACf,CAAC,AACD,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,GAAG,AACd,CAAC,AACD,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,EAAE,AACb,CAAC,AACD,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,GAAG,AACd,CAAC,AACD,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,GAAG,AACd,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC,AACH,CAAC,AAGD,MAAM,AAAC,YAAY,KAAK,CAAC,EAAE,aAAa,KAAK,CAAC,AAAC,CAAC,AAC9C,oBAAM,OAAO,AAAC,CAAC,AACb,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,IAAI,AACd,CAAC,AACH,CAAC"
}