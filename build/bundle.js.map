{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Search.svelte","../../src/Tree.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if (typeof $$scope.dirty === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j];\n                if (attributes[attribute.name]) {\n                    j++;\n                }\n                else {\n                    node.removeAttribute(attribute.name);\n                }\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\nfunction add_resize_listener(element, fn) {\n    if (getComputedStyle(element).position === 'static') {\n        element.style.position = 'relative';\n    }\n    const object = document.createElement('object');\n    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');\n    object.setAttribute('aria-hidden', 'true');\n    object.type = 'text/html';\n    object.tabIndex = -1;\n    let win;\n    object.onload = () => {\n        win = object.contentDocument.defaultView;\n        win.addEventListener('resize', fn);\n    };\n    if (/Trident/.test(navigator.userAgent)) {\n        element.appendChild(object);\n        object.data = 'about:blank';\n    }\n    else {\n        object.data = 'about:blank';\n        element.appendChild(object);\n    }\n    return {\n        cancel: () => {\n            win && win.removeEventListener && win.removeEventListener('resize', fn);\n            element.removeChild(object);\n        }\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nlet stylesheet;\nlet active = 0;\nlet current_rules = {};\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    if (!current_rules[name]) {\n        if (!stylesheet) {\n            const style = element('style');\n            document.head.appendChild(style);\n            stylesheet = style.sheet;\n        }\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    node.style.animation = (node.style.animation || '')\n        .split(', ')\n        .filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    )\n        .join(', ');\n    if (name && !--active)\n        clear_rules();\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        let i = stylesheet.cssRules.length;\n        while (i--)\n            stylesheet.deleteRule(i);\n        current_rules = {};\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nconst seen_callbacks = new Set();\nfunction flush() {\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (dirty_components.length) {\n            const component = dirty_components.shift();\n            set_current_component(component);\n            update(component.$$);\n        }\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined' ? window : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(children(options.target));\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.18.1' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_each_keys, validate_store, xlink_attr };\n","<script>\r\n  import { onMount } from \"svelte\";\r\n  // import { createEventDispatcher } from \"svelte\";\r\n  // const dispatch = createEventDispatcher();\r\n  // const func = () => dispatch(\"eventname\", var/ref);\r\n\r\n  // query is 2-way bound between Search and Tree\r\n  // query is textContent\r\n  export let query;\r\n\r\n  // tries to stop select all bug\r\n  let cntrlDown = false;\r\n\r\n  // trick to join onMount and $:label's powers\r\n  // let mounted = false;\r\n  // runs after component is loaded into the DOM - could put like, a lot of code in here\r\n  // onMount(async () => {\r\n  //   mounted = true;\r\n  // });\r\n\r\n  // catch select all, press a key bug that overrides the first whitespace character (needed for clickable width)\r\n  // $: if (query && query.charAt(0) !== \" \") {\r\n  //   console.log(`'${query}'`);\r\n  //   query = \" \" + query;\r\n  //   console.log(`'${query.charAt(0)}'`);\r\n  // }\r\n\r\n  // #cancel mouse-selection of query text\r\n  const queryMousedown = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  // watch from control key\r\n  const queryKeyup = e => {\r\n    if (e.key === \"Control\") {\r\n      // toggle global var\r\n      cntrlDown = false;\r\n      console.log(cntrlDown);\r\n    }\r\n  };\r\n\r\n  // #cancel special keys\r\n  const queryKeydown = e => {\r\n    if (e.key === \"Control\") {\r\n      // toggle global var\r\n      cntrlDown = true;\r\n      console.log(cntrlDown);\r\n    }\r\n\r\n    if (\r\n      e.key === \"Enter\" ||\r\n      e.key === \"Control\" ||\r\n      e.key === \"ArrowLeft\" ||\r\n      e.key === \"ArrowRight\" ||\r\n      e.key === \"Delete\" ||\r\n      (e.key === \"Backspace\" && e.target.textContent.length === 1) ||\r\n      (cntrlDown === true && (e.key === \"a\" || e.key === \"A\"))\r\n    ) {\r\n      e.preventDefault(); // will stop event bubbling to keypress\r\n      // console.log(`stopped ${e.key} special case`);\r\n      // find some way of ensuring query[0] is always a whitespace...\r\n      // detect control + a probably is the easiest way\r\n    }\r\n  };\r\n\r\n  // clicking on the body (not any specific elm could call positionCursor?)\r\n  // how do websites set the default mouse/focus place of a website?\r\n\r\n  // from https://www.geeksforgeeks.org/how-to-set-cursor-position-in-content-editable-element-using-javascript/\r\n  // warning: setting 'pointer-events' or 'user-select' to none undermines this function\r\n  const positionCursor = () => {\r\n    // relevant text-element\r\n    const tag = document.querySelector(\".query\");\r\n\r\n    if (tag.textContent.length !== 0) {\r\n      // Creates range object\r\n      const setpos = document.createRange();\r\n      // Creates object for selection\r\n      const set = window.getSelection();\r\n      // Set start position of range\r\n      setpos.setStart(tag.childNodes[0], tag.textContent.length);\r\n      // Collapse range within its boundary points\r\n      // Returns boolean\r\n      setpos.collapse(true);\r\n      // Remove all ranges set\r\n      set.removeAllRanges();\r\n      // Add range with respect to range object\r\n      set.addRange(setpos);\r\n      // Set cursor on focus\r\n      tag.focus();\r\n    } else {\r\n      console.log(tag.textContent.length);\r\n      // query = \" \";\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .omninav {\r\n    display: grid;\r\n    place-items: center;\r\n    background-color: var(--bg-color);\r\n    text-align: left;\r\n    width: 100%;\r\n    padding-left: 2rem;\r\n    padding-right: 2rem;\r\n  }\r\n\r\n  .search {\r\n    background-color: rgba(0, 0, 0, 0.69);\r\n    color: var(--primary-color);\r\n    display: inline;\r\n  }\r\n\r\n  .search-wrap {\r\n    width: 100%;\r\n    /* approx width of .tree */\r\n    max-width: 28.5rem;\r\n    margin-top: 2rem;\r\n    margin-bottom: 2rem;\r\n    padding-left: 0.2rem;\r\n    padding-right: 0.2rem;\r\n    outline: 1px solid white;\r\n    cursor: text;\r\n  }\r\n\r\n  .query {\r\n    outline: none;\r\n    caret-color: transparent;\r\n    /* user-select: none; */\r\n  }\r\n\r\n  .query::before {\r\n    content: \"$_:\";\r\n    display: inline;\r\n    color: var(--secondary-color);\r\n    padding-left: 0.15rem;\r\n  }\r\n\r\n  .query::after {\r\n    content: \"\";\r\n    display: inline-block;\r\n    width: 0.8rem;\r\n    height: 1.7rem;\r\n    margin-bottom: 0.08rem;\r\n    background-color: var(--primary-color);\r\n    vertical-align: middle;\r\n    animation: blink 1s ease-in-out infinite;\r\n  }\r\n\r\n  @keyframes blink {\r\n    0% {\r\n      opacity: 1;\r\n    }\r\n    20% {\r\n      opacity: 0.4;\r\n    }\r\n    40% {\r\n      opacity: 0;\r\n    }\r\n    60% {\r\n      opacity: 0.4;\r\n    }\r\n    80% {\r\n      opacity: 0.8;\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  /* mobile width and mobile landscape-height  */\r\n  @media (max-width: 527px), (max-height: 470px) {\r\n    .search-wrap {\r\n      padding-top: 0.1em;\r\n      padding-bottom: 0.1em;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"omninav\" on:click={positionCursor}>\r\n  <div class=\"search-wrap\">\r\n    <div class=\"search\" on:click={positionCursor}>\r\n      <span\r\n        class=\"query\"\r\n        contenteditable=\"true\"\r\n        spellcheck=\"false\"\r\n        bind:textContent={query}\r\n        on:click={positionCursor}\r\n        on:keydown={queryKeydown}\r\n        on:keyup={queryKeyup}\r\n        on:mousedown={queryMousedown} />\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- on:keypress={queryKeypress} -->\r\n<!-- on:keypress={console.log('keypress')} -->\r\n<!-- &nbsp; -->\r\n\r\n<!--\r\n  // count valid keypresses and restricts length\r\n  // only runs if key is not a special key\r\n  // forces search to remain single-line\r\n  const queryKeypress = e => {\r\n  // 21chars is max at 320px (i5)\r\n  // assume ~25-30% of clientWidth is not .query\r\n  // assume font-size: ~1rem\r\n  // 320 * 0.7 = 224\r\n  // 224 / 21 = ~10px per char\r\n  // use an equation between char size and omnibar width\r\n  let max = Math.floor(\r\n    (document.querySelector(\".navbar\").clientWidth * 0.666) / 10\r\n  );\r\n  console.log(max);\r\n  if (e.target.textContent.length > max) {\r\n    e.preventDefault();\r\n  }\r\n  };\r\n-->\r\n\r\n<!-- \r\n    // also an option from https://stackoverflow.com/a/7445389\r\n    // function SetEnd(txt) {\r\n      if (txt.createTextRange) {\r\n       //IE\r\n       var FieldRange = txt.createTextRange();\r\n       FieldRange.moveStart('character', txt.value.length);\r\n       FieldRange.collapse();\r\n       FieldRange.select();\r\n       }\r\n      else {\r\n       //Firefox and Opera\r\n       txt.focus();\r\n       var length = txt.value.length;\r\n       txt.setSelectionRange(length, length);\r\n      }\r\n    }\r\n  -->\r\n","<script>\r\n  /* \r\n  TO-ADD: a clear search function maybe after selecting a link or clicking\r\n  \r\n  IDEA:\r\n  after every subbranch ends and its time to switch back to col-1, add an extra row\r\n  how does adding an extra row per parent branch? it simplifies our equation:\r\n\r\n  (numBranches + numSubbranches) - numParentBranches = numRows\r\n  becomes\r\n  numBranches + numSubbranches = numRows\r\n*/\r\n\r\n  // import flatten from \"flat\";\r\n  import { onMount } from \"svelte\";\r\n\r\n  export let query = \"\";\r\n\r\n  // runs after component is loaded into the DOM - could put like, a lot of code in here\r\n  onMount(async () => {\r\n    createTree(tree);\r\n  });\r\n\r\n  // start matching from 1 meaningful char (accounts for whitespace)\r\n  $: if (query.length > 2) {\r\n    // get all non-empty branches\r\n    let branches = document.querySelectorAll(\".c1\");\r\n    branches = Array.from(branches).filter(b => b.textContent);\r\n\r\n    for (const branch of branches) {\r\n      if (branch.textContent.includes(query.substr(1))) {\r\n        branch.style.visibility = \"visible\";\r\n        branch.style.borderBottom = \"2px solid var(--primary-color)\";\r\n      }\r\n    }\r\n\r\n    // get all non-empty subbranches\r\n    let subbranches = document.querySelectorAll(\".c2\");\r\n    subbranches = Array.from(subbranches).filter(sb => sb.textContent);\r\n\r\n    for (const subbranch of subbranches) {\r\n      if (subbranch.textContent.includes(query.substr(1))) {\r\n        subbranch.style.visibility = \"visible\";\r\n        subbranch.style.borderLeft = \"2px solid var(--primary-color)\";\r\n      }\r\n    }\r\n    // if textContent, the previous sibling is the parent branch\r\n    // assume same parent branch for all subbranches that have no textContent prev siblings\r\n    // first c2 with text will also have a parent branch as prev sibling\r\n\r\n    // if (subbranches[0].previousElementSibling.textContent) {\r\n    // light up the parent node\r\n    // console.log(\r\n    //   \"parent branch:\",\r\n    //   subbranches[0].previousElementSibling.textContent\r\n    // );\r\n    // }\r\n  }\r\n\r\n  // add to videos: tidbits, PAVEMENT_2017_AH18, ...\r\n  // 'source' could be called 'root', 'home' ...\r\n  // placeholder tree object\r\n  // translate into generated object-only JSON string\r\n  let tree = {\r\n    source: \"path\",\r\n    about: \"path\",\r\n    web: {\r\n      primer_2027: \"path\",\r\n      platypus: \"path\",\r\n      roslyn_health: \"path\"\r\n    },\r\n    video: {\r\n      oh_ivy: \"path\",\r\n      procedural_disco: \"path\",\r\n      NCTRNL: \"path\"\r\n    }\r\n  };\r\n\r\n  // 1. set 'branch' to col-1 once, no newline\r\n  // 2. for subbranch length, add elm to col-2, then newline\r\n  // 3. after last subbranch elm, newline and set back to col-1\r\n  const createTree = obj => {\r\n    // counters for columns and rows\r\n    let c = 1;\r\n    let r = 1;\r\n\r\n    for (const branch in obj) {\r\n      if (typeof obj[branch] == \"object\") {\r\n        document.querySelector(`.c${c}.r${r}`).textContent = branch;\r\n        // console.log(branch, r, c);\r\n        r--;\r\n        for (let i = 0; i < Object.keys(obj[branch]).length; i++) {\r\n          c = 2;\r\n          r++;\r\n          // console.log(Object.keys(obj[branch])[i], r, c);\r\n          document.querySelector(`.c${c}.r${r}`).textContent = Object.keys(\r\n            obj[branch]\r\n          )[i];\r\n        }\r\n        // add margin-bump to last subbranch of a single parent branch here?\r\n        // or try style subbranch boundaries better?\r\n        // or go back to r += 2?\r\n\r\n        // reset for new branch\r\n        c = 1;\r\n        r++;\r\n      } else {\r\n        // console.log(branch, r, c);\r\n        document.querySelector(`.c${c}.r${r}`).textContent = branch;\r\n        c = 1;\r\n        r++;\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .tree {\r\n    grid-gap: 0;\r\n    grid-template-columns: repeat(2, min-content);\r\n  }\r\n\r\n  /* branches */\r\n  .tree div {\r\n    visibility: hidden;\r\n    background-color: var(--bg-color);\r\n    border: 2px solid var(--primary-color);\r\n  }\r\n\r\n  .c2 {\r\n    padding-left: 0.2rem;\r\n  }\r\n\r\n  /* mobile width and mobile landscape-height  */\r\n  @media (max-width: 510px), (max-height: 470px) {\r\n    .tree {\r\n      grid-template-columns: min-content auto;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"wrap\">\r\n  <div class=\"tree grid-2\">\r\n    <div class=\"c1 r1\" />\r\n    <div class=\"c2 r1\" />\r\n    <div class=\"c1 r2\" />\r\n    <div class=\"c2 r2\" />\r\n    <div class=\"c1 r3\" />\r\n    <div class=\"c2 r3\" />\r\n    <div class=\"c1 r4\" />\r\n    <div class=\"c2 r4\" />\r\n    <div class=\"c1 r5\" />\r\n    <div class=\"c2 r5\" />\r\n    <div class=\"c1 r6\" />\r\n    <div class=\"c2 r6\" />\r\n    <div class=\"c1 r7\" />\r\n    <div class=\"c2 r7\" />\r\n    <div class=\"c1 r8\" />\r\n    <div class=\"c2 r8\" />\r\n    <div class=\"c1 r9\">loading..</div>\r\n    <div class=\"c2 r9\">~*x+-+x*~*x+-</div>\r\n    <div class=\"c1 r10\" />\r\n    <div class=\"c2 r10\">|/-\\|/-\\|/-\\|</div>\r\n  </div>\r\n</div>\r\n\r\n<!-- html/nav structure options -->\r\n<!-- json, array, object, grid, table, list, mermaidjs ? -->\r\n<!-- could generate these grid items by parameterised calls to a component that makes #each html calls -->\r\n\r\n<!-- {#each x as y}{/each} -->\r\n\r\n<!--\r\n  // let branches = Object.keys(tree);\r\n  // console.log(branches);\r\n\r\n  // for (branch of branches) {\r\n  //   // branch css code here\r\n  //   if (branch.includes(query)) {\r\n  //     // light up brnach\r\n  //   }\r\n  // }\r\n\r\n  // from https://stackoverflow.com/a/44134784\r\n  // const getObjRows = obj => {\r\n  //   return Object.keys(tree).reduce(function(r, k) {\r\n  //     return r.concat(k, tree[k]);\r\n  //   }, []);\r\n  // };\r\n\r\n  // console.log(\r\n  //   tree.flatMap(a =>\r\n  //     typeof a == \"object\" ? console.log(\"col-2\") : console.log(\"col-1\")\r\n  //   )\r\n  // );\r\n  // console.log(Object.keys(flatten(tree)));\r\n  // console.log(Object.entries(tree));\r\n  // console.log(flatten(tree).length);\r\n\r\n  // const flatTree = flatten(tree);\r\n\r\n // $: if (query) {\r\n  //   console.log(query[0]);\r\n  //   if (query[0] !== \" \") {\r\n  //     query = \" \";\r\n  //   }\r\n  // } -->\r\n","<script>\r\n  // import Omninav from \"./Omninav.svelte\";\r\n  // , { query }\r\n  import Search from \"./Search.svelte\";\r\n  import Tree from \"./Tree.svelte\";\r\n\r\n  // intermediate query variable to pass from Search --> Omninav --> Tree\r\n  let queryProp;\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n<Search query=\"&nbsp;\" bind:query={queryProp} />\r\n<Tree query={queryProp} />\r\n","import App from './App.svelte';\n\nconst app = new App({\n  target: document.body,\n  props: {\n    name: 'jim'\n  }\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","space","data","createTextNode","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flush","length","shift","update","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","d","create_component","mount_component","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","callbacks","ready","ret","rest","hydrate","l","Array","from","childNodes","children","intro","SvelteComponent","[object Object]","this","$destroy","type","index","indexOf","splice","query","cntrlDown","e","preventDefault","key","console","log","textContent","tag","querySelector","setpos","createRange","set","window","getSelection","setStart","collapse","removeAllRanges","addRange","focus","createTree","tree","source","about","web","primer_2027","platypus","roslyn_health","video","oh_ivy","procedural_disco","NCTRNL","obj","r","branch","keys","branches","querySelectorAll","includes","substr","style","visibility","borderBottom","subbranches","sb","subbranch","borderLeft","undefined","queryProp","body"],"mappings":"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"}